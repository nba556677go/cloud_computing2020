[{"/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/index.js":"1","/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/App.js":"2","/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/reportWebVitals.js":"3","/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/components/NavBar.js":"4","/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/components/MySelect.js":"5","/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/containers/MyButton.js":"6","/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/containers/Home.js":"7","/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/containers/Son.js":"8","/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/containers/MyDBSelect.js":"9","/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/containers/window-opener.js":"10","/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/components/MyChart.js":"11","/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/containers/maps/Mymap.js":"12","/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/containers/maps/InfoWindow.js":"13"},{"size":500,"mtime":1607581589871,"results":"14","hashOfConfig":"15"},{"size":878,"mtime":1610038480974,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1607581589871,"results":"17","hashOfConfig":"15"},{"size":188,"mtime":1610484659541,"results":"18","hashOfConfig":"15"},{"size":202,"mtime":1607581589871,"results":"19","hashOfConfig":"15"},{"size":580,"mtime":1610007577557,"results":"20","hashOfConfig":"15"},{"size":1262,"mtime":1610484582780,"results":"21","hashOfConfig":"15"},{"size":1069,"mtime":1610008133822,"results":"22","hashOfConfig":"15"},{"size":2589,"mtime":1609403786987,"results":"23","hashOfConfig":"15"},{"size":3434,"mtime":1610012492696,"results":"24","hashOfConfig":"15"},{"size":2949,"mtime":1608215847885,"results":"25","hashOfConfig":"15"},{"size":5413,"mtime":1610483359665,"results":"26","hashOfConfig":"15"},{"size":2453,"mtime":1610477125637,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"15lyujm",{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"30"},"/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/index.js",[],["60","61"],"/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/App.js",["62","63","64","65","66","67"],"import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport NavBar from './components/NavBar'\nimport MySelect from './components/MySelect'\nimport MyButton from './containers/MyButton'\nimport MyDBSelect from './containers/MyDBSelect'\nimport { Home } from \"./containers/Home\";\nimport { Son } from \"./containers/Son\";\n\nlet myData = {\n  name: 'vincent',\n  gender: 'male'\n}\n\nfunction App() {\n  return (\n    <div>\n      {/*\n      <NavBar />\n      <MyButton data={myData} />\n      <MyDBSelect />\n      */}\n\n\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/son\" component={Son}/>\n          <Route exact path=\"/\" component={Home}/>\n          <Redirect from=\"*\" to=\"/\" />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/reportWebVitals.js",[],"/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/components/NavBar.js",["68"],"/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/components/MySelect.js",["69"],"import React from 'react'\n\nexport default () => {\n  return (\n    <div className='my-select'>\n      <select>\n        <option>Hello</option>\n        <option>World</option>\n      </select>\n    </div>\n  )\n}","/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/containers/MyButton.js",[],"/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/containers/Home.js",["70","71","72"],"/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/containers/Son.js",[],"/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/containers/MyDBSelect.js",["73"],"import React from 'react'\nimport axios from 'axios'\nimport MyChart, {MyDistrictChart} from '../components/MyChart'\n\n\nclass MyDBSelect extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { station: 'stationA', show: false, districtData: null,  refresh: true }\n    //set all stations\n    this.stations = null\n    \n    //make sure total station list loaded first before rendering the first time\n    axios({\n      method: 'get',\n      url: `http://140.112.28.115:8800/bikeapi/getallChID`\n    })\n    .then(response => this.stations = response.data.chineseID )\n    .then(() => {  this.setState({ refresh: true }) })//nees to call setstate to render page!!!\n  \n  }\n\n \n\n  // fetch data from our data base\n  handleSelect = (e) => {\n    axios({\n      method: 'get',\n      url: `http://140.112.28.115:8800/bikeapi/getdata?id=${e.target.value}`\n    })\n    .then(response => this.stationData = response.data )\n    .then(() => { console.log(this.stationData) })\n    .then(() => this.setState({ station: e.target.value, stationData : this.staionData}) )\n    .then(() => {\n      axios({\n        method: 'get',\n        url: `http://140.112.28.115:8800/bikeapi/getdistrict?district=${this.stationData.district}`\n      })\n      .then(response => this.state.districtData = response.data )\n      .then(() => { console.log(this.state.districtData) })\n      .then(() => this.setState({show: true }) )\n    })\n   /*\n    axios({\n      method: 'get',\n      url: `http://140.112.28.115:5000/getdistrict?district=${this.state.stationData.district}`\n    })\n    .then(response => this.districtData = response.data )\n    .then(() => { console.log(this.districtData) })\n    .then(() => this.setState({show: true }) )\n*/\n\n\n    \n  }\n\n\n\n  render() {\n    let display = null \n    let selectStations = null\n    \n    if (this.state.show) {\n      let props = {\n                    district: this.stationData.district,\n                    data : this.state.districtData\n                  }\n      display = (\n        <div>\n         \n          <MyChart info={this.stationData}/>\n          \n          <MyDistrictChart data={props}/>\n         \n        </div>\n      )\n    }\n\n    if (this.stations) {\n      selectStations = (\n        <select onChange={this.handleSelect}>\n          {this.stations.map(s => (\n            <option key={s} value={s}>{s}</option>\n          ))}\n        </select>  \n      )\n    }\n\n    return (\n      <div>\n        <h2>Please choose a Youbike station</h2>    \n        {selectStations}  \n          <div>{display}</div>\n          \n      </div>\n    )\n  }\n}\n\nexport default MyDBSelect","/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/containers/window-opener.js",[],"/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/components/MyChart.js",[],"/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/containers/maps/Mymap.js",["74"],"import React from 'react';\nimport { Map, GoogleApiWrapper, Marker, Circle } from 'google-maps-react';\nimport axios from 'axios';\nimport InfoWindow from './InfoWindow';\n\n\n\nconst mapStyles = {\n  width: '80%',\n  height: '70%'\n};\n\nexport class MapContainer extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n\n      liveLat: null,\n      liveLng: null, \n      stations: [\n        {lat: 25.96233, lng: 112.80404},\n      ]\n    }\n  }\n\n  //const getMarker = () =>{}\n  componentDidMount() {\n\n    const getMarkers = async () => {\n      //get live data\n      let res = await axios({\n        method: 'get',\n        url: `http://140.112.28.115:8800/bikeapi/getmapMarkers?latitude=${this.state.liveLat}&&longtitude=${this.state.liveLng}`\n      })\n      \n      //this.stations = res.data\n      console.log(\"latitude:\", this.state.liveLat, this.state.liveLng)\n      await this.parseMarkerLocations(res.data)\n      console.log(this.state.stations)\n      \n   \n    }\n    //get live location\n    if (\"geolocation\" in navigator) {\n      console.log(\"location data available\");\n\n      const success = async position => {\n        this.setState({liveLat: position.coords.latitude, liveLng: position.coords.longitude}, () => {getMarkers()})\n        //await getMarkers();\n      }\n      const error = () => {\n        console.log(\"get location error, returning to manual setting...\");\n        this.setState({liveLat: 25.021644799999997, liveLng: 121.5463424}, () => {getMarkers()})\n      }\n      navigator.geolocation.getCurrentPosition(success, error);\n      \n    } else {\n      console.log(\"Unable to retrieve your location\");\n      //using default location\n      this.setState({liveLat: 25.021644799999997, liveLng: 121.5463424})\n      console.log(\"Latitude manually set to :\", this.state.liveLat);\n      console.log(\"Longitude manually set to :\", this.state.liveLng);  \n    }\n\n     \n  }\n\n  parseMarkerLocations = async (data) => {\n    //store max distance of nearest 10 bikes\n    this.MaxDistance = data.MaxDistance\n    console.log(this.MaxDistance)\n    let cordinates = []\n    for(let i = 0 ; i < data.latitude.length ; i++){\n      let isempty = false\n      if(data.availBike[i] == 0 ){\n        isempty = true \n      }\n      //console.log({\"lat\" : data.latitude[i], \"lng\":data.longtitude[i]})\n      //x.push(info.info.availBike[i].time)\n      cordinates.push({\"lat\" : data.latitude[i], \"lng\":data.longtitude[i],\n                       \"stationID\" : data.stationID[i], \"stationName\": data.stationName[i],\n                       \"availBike\": data.availBike[i], \"totalBike\": data.totalBike[i],\n                       \"near\" : data.near[i].near, \"distance\": parseInt(data.near[i].distance), \"empty\": isempty\n                      });\n      //console.log(data.near[i].distance)\n    }\n    \n    this.setState({stations: cordinates})\n  }\n  // map display helper functions\n  showMarkers = () => {\n    return this.state.stations.map((store, index) => {\n      return <Marker key={index} id={index} position={{\n       lat: store.lat,\n       lng: store.lng\n     }}\n     onClick={this.onMarkerClick} name={store.stationName} data={store} availBike={store.availBike} distance={store.distance}\n      />\n    })\n  }\n  showInfo = () => {\n    const content = this.state.selectedPlace.data.map((key, index) =>\n      <div key={index}>\n        <h3>Key Name: {key}</h3>\n      </div>\n    )\n    return content;\n  }\n\n  onMarkerClick = (props, marker) => {\n    this.setState({\n      activeMarker: marker,\n      selectedPlace: props,\n      showingInfoWindow: true\n    });\n    console.log(this.state.selectedPlace)\n  }\n\n  onInfoWindowClose = () =>\n    this.setState({\n      activeMarker: null,\n      showingInfoWindow: false\n    });\n\n  onMapClicked = () => {\n    if (this.state.showingInfoWindow)\n      this.setState({\n        activeMarker: null,\n        showingInfoWindow: false\n      });\n  };\n\n  render() {\n    return (\n        <Map\n          google={this.props.google}\n          zoom={16}\n          style={mapStyles}\n          center={{ \n            lat: this.state.liveLat, \n            lng: this.state.liveLng\n        }}>\n          <Circle\n            radius={this.MaxDistance}\n            center={{ \n              lat: this.state.liveLat, \n              lng: this.state.liveLng\n            }}\n            onMouseover={() => console.log('mouseover')}\n            onClick={() => console.log('click')}\n            onMouseout={() => console.log('mouseout')}\n            strokeColor='transparent'\n            strokeOpacity={0}\n            strokeWeight={5}\n            fillColor='#FFFF00'\n            fillOpacity={0.2}\n          />\n\n          {this.showMarkers()}\n        \n          <InfoWindow\n            marker={this.state.activeMarker}\n            visible={this.state.showingInfoWindow}>\n              <div>\n                {/*{this.showInfo()}*/}\n                <h3>{this.state.selectedPlace.name}</h3>\n                \n                <h5>Available bikes: {this.state.selectedPlace.availBike}</h5>\n                <h5>Distance from you: {this.state.selectedPlace.distance}m</h5>\n                \n                \n              </div>\n          </InfoWindow>\n\n        \n        </Map>\n        \n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  //enter your api key here\n  apiKey: 'AIzaSyCu6EE4kF1ad_hh5pJUU_MW5qjteMLOTy0'\n})(MapContainer);","/home/vincent/Documents/courses/cloud_computing2020/final/frontend/src/containers/maps/InfoWindow.js",["75"],"import React from 'react'\nimport PropTypes from 'prop-types'\nimport ReactDOM from 'react-dom'\nimport ReactDOMServer from 'react-dom/server'\n\nexport class InfoWindow extends React.Component {\n\n  componentDidMount() {\n    this.renderInfoWindow();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {google, map} = this.props;\n\n    if (!google || !map) {\n      return;\n    }\n\n    if (map !== prevProps.map) {\n      this.renderInfoWindow();\n    }\n\n    if (this.props.position !== prevProps.position) {\n      this.updatePosition();\n    }\n\n    if (this.props.children !== prevProps.children) {\n      this.updateContent();\n    }\n\n    if ((this.props.visible !== prevProps.visible ||\n        this.props.marker !== prevProps.marker ||\n        this.props.position !== prevProps.position)) {\n        this.props.visible ?\n          this.openWindow() :\n          this.closeWindow();\n    }\n  }\n\n  renderInfoWindow() {\n    const {\n      map,\n      google,\n      mapCenter,\n      ...props\n    } = this.props;\n\n    if (!google || !google.maps) {\n      return;\n    }\n\n    const iw = this.infowindow = new google.maps.InfoWindow({\n      content: '',\n      ...props\n    });\n\n    google.maps.event\n      .addListener(iw, 'closeclick', this.onClose.bind(this))\n    google.maps.event\n      .addListener(iw, 'domready', this.onOpen.bind(this));\n  }\n\n  onOpen() {\n    if (this.props.onOpen) {\n      this.props.onOpen();\n    }\n  }\n\n  onClose() {\n    if (this.props.onClose) {\n      this.props.onClose();\n    }\n  }\n\n  openWindow() {\n    this.infowindow.open(this.props.map, this.props.marker);\n  }\n\n  updatePosition() {\n    let pos = this.props.position;\n    //console.log(google.maps)\n    //if (!(pos instanceof google.maps.LatLng)) {\n    //  pos = pos && new google.maps.LatLng(pos.lat, pos.lng);\n    //}\n    this.infowindow.setPosition(pos);\n  }\n\n  updateContent() {\n    const content = this.renderChildren();\n    this.infowindow.setContent(content);\n  }\n\n  closeWindow() {\n    this.infowindow.close();\n  }\n\n  renderChildren() {\n    const {children} = this.props;\n    return ReactDOMServer.renderToString(children);\n  }\n\n  render() {\n    return null;\n  }\n}\n\nInfoWindow.propTypes = {\n  children: PropTypes.element.isRequired,\n  map: PropTypes.object,\n  marker: PropTypes.object,\n  position: PropTypes.object,\n  visible: PropTypes.bool,\n\n  // callbacks\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func\n}\n\nInfoWindow.defaultProps = {\n  visible: false\n}\n\nexport default InfoWindow",{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":1,"column":8,"nodeType":"82","messageId":"83","endLine":1,"endColumn":12},{"ruleId":"80","severity":1,"message":"84","line":5,"column":8,"nodeType":"82","messageId":"83","endLine":5,"endColumn":14},{"ruleId":"80","severity":1,"message":"85","line":6,"column":8,"nodeType":"82","messageId":"83","endLine":6,"endColumn":16},{"ruleId":"80","severity":1,"message":"86","line":7,"column":8,"nodeType":"82","messageId":"83","endLine":7,"endColumn":16},{"ruleId":"80","severity":1,"message":"87","line":8,"column":8,"nodeType":"82","messageId":"83","endLine":8,"endColumn":18},{"ruleId":"80","severity":1,"message":"88","line":12,"column":5,"nodeType":"82","messageId":"83","endLine":12,"endColumn":11},{"ruleId":"89","severity":1,"message":"90","line":4,"column":1,"nodeType":"91","endLine":10,"endColumn":2},{"ruleId":"89","severity":1,"message":"90","line":3,"column":1,"nodeType":"91","endLine":12,"endColumn":2},{"ruleId":"80","severity":1,"message":"85","line":5,"column":8,"nodeType":"82","messageId":"83","endLine":5,"endColumn":16},{"ruleId":"80","severity":1,"message":"86","line":6,"column":8,"nodeType":"82","messageId":"83","endLine":6,"endColumn":16},{"ruleId":"80","severity":1,"message":"92","line":30,"column":16,"nodeType":"82","messageId":"83","endLine":30,"endColumn":23},{"ruleId":"93","severity":1,"message":"94","line":39,"column":25,"nodeType":"95","endLine":39,"endColumn":35},{"ruleId":"96","severity":1,"message":"97","line":80,"column":28,"nodeType":"98","messageId":"99","endLine":80,"endColumn":30},{"ruleId":"80","severity":1,"message":"100","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":16},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'NavBar' is defined but never used.","'MySelect' is defined but never used.","'MyButton' is defined but never used.","'MyDBSelect' is defined but never used.","'myData' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'message' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ReactDOM' is defined but never used.","no-global-assign","no-unsafe-negation"]